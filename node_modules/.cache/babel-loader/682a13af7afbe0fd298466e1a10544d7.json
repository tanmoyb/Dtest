{"ast":null,"code":"var _jsxFileName = \"/home/tanmoy/Desktop/map/Dtest/src/Components/FileLoader/FileLoader.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport UploadService from \"../../services/FileUploadService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FileLoader = ({\n  content\n}) => {\n  _s();\n\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\n  const [currentFile, setCurrentFile] = useState(undefined);\n  const [progress, setProgress] = useState(0);\n  const [message, setMessage] = useState(\"\");\n  const [fileInfos, setFileInfos] = useState([]);\n\n  const selectFile = event => {\n    setSelectedFiles(event.target.files);\n  };\n\n  const upload = () => {\n    let currentFile = selectedFiles[0];\n    setProgress(0);\n    setCurrentFile(currentFile);\n    UploadService.upload(currentFile, event => {\n      setProgress(Math.round(100 * event.loaded / event.total));\n    }).then(response => {\n      setMessage(response.data.message);\n      return UploadService.getFiles();\n    }).then(files => {\n      setFileInfos(files.data);\n    }).catch(() => {\n      setProgress(0);\n      setMessage(\"Could not upload the file!\");\n      setCurrentFile(undefined);\n    });\n    setSelectedFiles(undefined);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"FileLoader\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 3\n  }, this);\n};\n\n_s(FileLoader, \"9XJesoBvh+BoxZz0PnbCMAdUbnA=\");\n\n_c = FileLoader;\nexport default FileLoader;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileLoader\");","map":{"version":3,"sources":["/home/tanmoy/Desktop/map/Dtest/src/Components/FileLoader/FileLoader.tsx"],"names":["React","useState","UploadService","FileLoader","content","selectedFiles","setSelectedFiles","undefined","currentFile","setCurrentFile","progress","setProgress","message","setMessage","fileInfos","setFileInfos","selectFile","event","target","files","upload","Math","round","loaded","total","then","response","data","getFiles","catch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,kCAA1B;;;AAKA,MAAMC,UAA2B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqC;AAAA;;AAErE,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAACM,SAAD,CAAlD;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAACM,SAAD,CAA9C;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AAEA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,EAAD,CAA1C;;AAEA,QAAMe,UAAU,GAAIC,KAAD,IAAW;AAC1BX,IAAAA,gBAAgB,CAACW,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAhB;AACD,GAFH;;AAIE,QAAMC,MAAM,GAAG,MAAM;AACnB,QAAIZ,WAAW,GAAGH,aAAa,CAAC,CAAD,CAA/B;AAEAM,IAAAA,WAAW,CAAC,CAAD,CAAX;AACAF,IAAAA,cAAc,CAACD,WAAD,CAAd;AAEAN,IAAAA,aAAa,CAACkB,MAAd,CAAqBZ,WAArB,EAAmCS,KAAD,IAAW;AAC3CN,MAAAA,WAAW,CAACU,IAAI,CAACC,KAAL,CAAY,MAAML,KAAK,CAACM,MAAb,GAAuBN,KAAK,CAACO,KAAxC,CAAD,CAAX;AACD,KAFD,EAGGC,IAHH,CAGSC,QAAD,IAAc;AAClBb,MAAAA,UAAU,CAACa,QAAQ,CAACC,IAAT,CAAcf,OAAf,CAAV;AACA,aAAOV,aAAa,CAAC0B,QAAd,EAAP;AACD,KANH,EAOGH,IAPH,CAOSN,KAAD,IAAW;AACfJ,MAAAA,YAAY,CAACI,KAAK,CAACQ,IAAP,CAAZ;AACD,KATH,EAUGE,KAVH,CAUS,MAAM;AACXlB,MAAAA,WAAW,CAAC,CAAD,CAAX;AACAE,MAAAA,UAAU,CAAC,4BAAD,CAAV;AACAJ,MAAAA,cAAc,CAACF,SAAD,CAAd;AACD,KAdH;AAgBAD,IAAAA,gBAAgB,CAACC,SAAD,CAAhB;AACD,GAvBD;;AAyBJ,sBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAGD,CAzCD;;GAAMJ,U;;KAAAA,U;AA2CN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport UploadService from \"../../services/FileUploadService\";\ninterface Props {\n  content: string;\n}\n\nconst FileLoader: React.FC<Props> = ({ content }): React.ReactElement => {\n\n    const [selectedFiles, setSelectedFiles] = useState(undefined);\n    const [currentFile, setCurrentFile] = useState(undefined);\n    const [progress, setProgress] = useState(0);\n    const [message, setMessage] = useState(\"\");\n  \n    const [fileInfos, setFileInfos] = useState([]);\n\n    const selectFile = (event) => {\n        setSelectedFiles(event.target.files);\n      };\n\n      const upload = () => {\n        let currentFile = selectedFiles[0];\n    \n        setProgress(0);\n        setCurrentFile(currentFile);\n    \n        UploadService.upload(currentFile, (event) => {\n          setProgress(Math.round((100 * event.loaded) / event.total));\n        })\n          .then((response) => {\n            setMessage(response.data.message);\n            return UploadService.getFiles();\n          })\n          .then((files) => {\n            setFileInfos(files.data);\n          })\n          .catch(() => {\n            setProgress(0);\n            setMessage(\"Could not upload the file!\");\n            setCurrentFile(undefined);\n          });\n    \n        setSelectedFiles(undefined);\n      };\n\n  return (\n  <div>FileLoader</div>\n  )\n};\n\nexport default FileLoader;\n"]},"metadata":{},"sourceType":"module"}