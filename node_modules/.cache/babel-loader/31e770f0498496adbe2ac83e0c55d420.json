{"ast":null,"code":"var _jsxFileName = \"/home/tanmoy/Desktop/toast/digia-project/src/Components/UserTable/UserTable.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_HOST = 'http://localhost:4000';\nconst INVENTORY_API_URL = `${API_HOST}/inventory`;\n\nconst UserTable = ({}) => {\n  _s();\n\n  const [data, setData] = useState([]);\n\n  const fetchInventory = () => {\n    fetch(`${INVENTORY_API_URL}`).then(res => {\n      // eslint-disable-next-line no-console\n      console.log('res', res);\n      return res.json();\n    }).then(json => {\n      // eslint-disable-next-line no-console\n      console.log('json', json);\n      return setData(json);\n    });\n  };\n\n  useEffect(() => {\n    fetchInventory();\n  }, []);\n  const [inEditMode, setInEditMode] = useState({\n    status: false,\n    rowKey: null\n  });\n  const [unitPrice, setUnitPrice] = useState(null || '');\n  /**\n     *\n     * @param id - The id of the product\n     * @param currentUnitPrice - The current unit price of the product\n     */\n\n  const onEdit = ({\n    id,\n    currentUnitPrice\n  }) => {\n    setInEditMode({\n      status: true,\n      rowKey: id\n    });\n    setUnitPrice(currentUnitPrice);\n  };\n  /**\n     *\n     * @param id\n     * @param newUnitPrice\n     */\n\n\n  const updateInventory = ({\n    id,\n    newUnitPrice\n  }) => {\n    // eslint-disable-next-line no-console\n    console.log('unit price', newUnitPrice); // eslint-disable-next-line no-console\n\n    console.log('id', id);\n    fetch(`${INVENTORY_API_URL}/${id}`, {\n      method: 'PATCH',\n      body: JSON.stringify({}),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    }).then(response => response.json()).then(json => {\n      // reset inEditMode and unit price state values\n      onCancel(); // fetch the updated data\n\n      fetchInventory();\n    });\n  };\n\n  const deleteUser = id => {\n    // eslint-disable-next-line no-console\n    console.log('id', id);\n    fetch(`${INVENTORY_API_URL}/${id}`, {\n      method: 'DELETE',\n      body: JSON.stringify({}),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    }).then(response => response.json()).then(json => {\n      // reset inEditMode and unit price state values\n      onCancel(); // fetch the updated data\n\n      fetchInventory();\n    });\n  };\n  /**\n     *\n     * @param id -The id of the product\n     * @param newUnitPrice - The new unit price of the product\n     */\n\n\n  const onSave = ({\n    id,\n    newUnitPrice\n  }) => {\n    updateInventory({\n      id,\n      newUnitPrice\n    });\n  };\n\n  const onCancel = () => {\n    // reset the inEditMode state value\n    setInEditMode({\n      status: false,\n      rowKey: null\n    }); // reset the unit price state value\n\n    setUnitPrice('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Simple Inventory Table\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"PhoneNumber\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: inEditMode.status && inEditMode.rowKey === item.id ? /*#__PURE__*/_jsxDEV(\"input\", {\n              value: unitPrice,\n              onChange: event => setUnitPrice(event.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 23\n            }, this) : item.phoneNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: inEditMode.status && inEditMode.rowKey === item.id ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: 'btn-success',\n                onClick: () => onSave({\n                  id: item.id,\n                  newUnitPrice: unitPrice\n                }),\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: 'btn-secondary',\n                style: {\n                  marginLeft: 8\n                },\n                onClick: () => onCancel(),\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              className: 'btn-primary',\n              onClick: () => onEdit({\n                id: item.id,\n                currentUnitPrice: item.phoneNumber\n              }),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 17\n          }, this)]\n        }, item.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserTable, \"CDo0Vh1bJTaQyXg3dL1pBL/35Pk=\");\n\n_c = UserTable;\nexport default UserTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserTable\");","map":{"version":3,"sources":["/home/tanmoy/Desktop/toast/digia-project/src/Components/UserTable/UserTable.tsx"],"names":["React","useEffect","useState","API_HOST","INVENTORY_API_URL","UserTable","data","setData","fetchInventory","fetch","then","res","console","log","json","inEditMode","setInEditMode","status","rowKey","unitPrice","setUnitPrice","onEdit","id","currentUnitPrice","updateInventory","newUnitPrice","method","body","JSON","stringify","headers","response","onCancel","deleteUser","onSave","map","item","name","email","event","target","value","phoneNumber","marginLeft"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nconst API_HOST = 'http://localhost:4000'\nconst INVENTORY_API_URL = `${API_HOST}/inventory`\ninterface Props {\n  content?: string;\n}\n\ninterface Items{\n  'id': number\n  'name': string,\n  'email': string,\n  'phoneNumber': string,\n}\n\nconst UserTable: React.FC<Props> = ({}): React.ReactElement => {\n  const [data, setData] = useState([])\n\n  const fetchInventory = (): void => {\n    fetch(`${INVENTORY_API_URL}`)\n      .then(res => {\n        // eslint-disable-next-line no-console\n        console.log('res', res)\n        return res.json()})\n      .then(json => {\n        // eslint-disable-next-line no-console\n        console.log('json', json)\n        return setData(json)})\n  }\n\n  useEffect(() => {\n    fetchInventory()\n  }, [])\n\n  const [inEditMode, setInEditMode] = useState({\n    status: false,\n    rowKey: null\n  })\n\n  const [unitPrice, setUnitPrice] = useState(null || '')\n\n  /**\n     *\n     * @param id - The id of the product\n     * @param currentUnitPrice - The current unit price of the product\n     */\n  const onEdit = ({ id, currentUnitPrice }): void => {\n    setInEditMode({\n      status: true,\n      rowKey: id\n    })\n    setUnitPrice(currentUnitPrice)\n  }\n\n  /**\n     *\n     * @param id\n     * @param newUnitPrice\n     */\n  const updateInventory = ({ id, newUnitPrice }): void => {\n    // eslint-disable-next-line no-console\n    console.log('unit price', newUnitPrice)\n    // eslint-disable-next-line no-console\n    console.log('id', id)\n    fetch(`${INVENTORY_API_URL}/${id}`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    })\n      .then(response => response.json())\n      .then(json => {\n        // reset inEditMode and unit price state values\n        onCancel()\n        // fetch the updated data\n        fetchInventory()\n      })\n  }\n\n\n  const deleteUser = (id): void => {\n    // eslint-disable-next-line no-console\n    console.log('id', id)\n    fetch(`${INVENTORY_API_URL}/${id}`, {\n      method: 'DELETE',\n      body: JSON.stringify({\n\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    })\n      .then(response => response.json())\n      .then(json => {\n        // reset inEditMode and unit price state values\n        onCancel()\n        // fetch the updated data\n        fetchInventory()\n      })\n  }\n\n  /**\n     *\n     * @param id -The id of the product\n     * @param newUnitPrice - The new unit price of the product\n     */\n  const onSave = ({ id, newUnitPrice }): void => {\n    updateInventory({ id, newUnitPrice })\n  }\n\n  const onCancel = (): void => {\n    // reset the inEditMode state value\n    setInEditMode({\n      status: false,\n      rowKey: null\n    })\n    // reset the unit price state value\n    setUnitPrice('')\n  }\n\n  return (\n    <div className='container'>\n      <h1>Simple Inventory Table</h1>\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Email</th>\n            <th>PhoneNumber</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            data.map((item: Items) => (\n              <tr key={item.id}>\n                <td>{item.name}</td>\n                <td>{item.email}</td>\n                <td>\n                  {\n                    inEditMode.status && inEditMode.rowKey === item.id ? (\n                      <input value={unitPrice}\n                        onChange={(event): void => setUnitPrice(event.target.value)}\n                      />\n                    ) : (\n                      item.phoneNumber\n                    )\n                  }\n                </td>\n                <td>\n                  {\n                    inEditMode.status && inEditMode.rowKey === item.id ? (\n                      <React.Fragment>\n                        <button\n                          className={'btn-success'}\n                          onClick={(): void => onSave({ id: item.id, newUnitPrice: unitPrice })}\n                        >\n                        Save\n                        </button>\n                        <button\n                          className={'btn-secondary'}\n                          style={{ marginLeft: 8 }}\n                          onClick={(): void => onCancel()}\n                        >\n                        Cancel\n                        </button>\n                      </React.Fragment>\n                    ) : (\n                      <button\n                        className={'btn-primary'}\n                        onClick={(): void => onEdit({ id: item.id,\n                          currentUnitPrice: item.phoneNumber })}\n                      >\n                      Edit\n                      </button>\n                    )\n                  }\n                </td>\n              </tr>\n            ))\n          }\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default UserTable"]},"metadata":{},"sourceType":"module"}