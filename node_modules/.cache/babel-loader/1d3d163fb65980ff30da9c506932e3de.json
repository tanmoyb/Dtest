{"ast":null,"code":"var _jsxFileName = \"/home/tanmoy/Desktop/map/Dtest/src/Components/FileLoader/FileLoader.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport UploadService from \"../../services/FileUploadService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FileLoader = ({\n  content\n}) => {\n  _s();\n\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [currentFile, setCurrentFile] = useState(undefined);\n  const [progress, setProgress] = useState(0);\n  const [message, setMessage] = useState(\"\");\n  const [fileInfos, setFileInfos] = useState([]);\n  useEffect(() => {\n    UploadService.getFiles().then(response => {\n      setFileInfos(response.data);\n    });\n  }, []);\n\n  const selectFile = event => {\n    setSelectedFiles(event.target.files);\n  };\n\n  const upload = () => {\n    let currentFile = selectedFiles[0];\n    setProgress(0);\n    setCurrentFile(currentFile);\n    UploadService.upload(currentFile, event => {\n      setProgress(Math.round(100 * event.loaded / event.total));\n    }).then(response => {\n      console.log(\"response\");\n      setMessage(response.data.message);\n      return UploadService.getFiles();\n    }).then(files => {\n      setFileInfos(files.data);\n    }).catch(() => {\n      setProgress(0);\n      setMessage(\"Could not upload the file!\");\n      setCurrentFile(undefined);\n    });\n    setSelectedFiles([]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"btn btn-default\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: selectFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-success\",\n      disabled: !selectedFiles,\n      onClick: upload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-light\",\n      role: \"alert\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-header\",\n        children: \"List of Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group list-group-flush\",\n        children: fileInfos && fileInfos.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: file.url,\n            children: file.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FileLoader, \"nwaHCVznw0r6WdVYVdScBidbO7U=\");\n\n_c = FileLoader;\nexport default FileLoader;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileLoader\");","map":{"version":3,"sources":["/home/tanmoy/Desktop/map/Dtest/src/Components/FileLoader/FileLoader.tsx"],"names":["React","useState","useEffect","UploadService","FileLoader","content","selectedFiles","setSelectedFiles","currentFile","setCurrentFile","undefined","progress","setProgress","message","setMessage","fileInfos","setFileInfos","getFiles","then","response","data","selectFile","event","target","files","upload","Math","round","loaded","total","console","log","catch","map","file","index","url","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport UploadService from \"../../services/FileUploadService\";\ninterface Props {\n  content: string;\n}\n\nconst FileLoader: React.FC<Props> = ({ content }): React.ReactElement => {\n\n    const [selectedFiles, setSelectedFiles] = useState([]);\n    const [currentFile, setCurrentFile] = useState(undefined);\n    const [progress, setProgress] = useState(0);\n    const [message, setMessage] = useState(\"\");\n    const [fileInfos, setFileInfos] = useState([]);\n  \n    useEffect(() => {\n      UploadService.getFiles().then((response) => {\n        setFileInfos(response.data);\n      });\n    }, []);\n  \n    const selectFile = (event) => {\n      setSelectedFiles(event.target.files);\n    };\n  \n    const upload = () => {\n      let currentFile = selectedFiles[0];\n  \n      setProgress(0);\n      setCurrentFile(currentFile);\n  \n      UploadService.upload(currentFile, (event) => {\n        setProgress(Math.round((100 * event.loaded) / event.total));\n      })\n        .then((response) => {\n            console.log(\"response\")\n          setMessage(response.data.message);\n          return UploadService.getFiles();\n        })\n        .then((files) => {\n          setFileInfos(files.data);\n        })\n        .catch(() => {\n          setProgress(0);\n          setMessage(\"Could not upload the file!\");\n          setCurrentFile(undefined);\n        });\n  \n      setSelectedFiles([]);\n    };\n\n  return (\n    <div>\n\n\n      <label className=\"btn btn-default\">\n        <input type=\"file\" onChange={selectFile} />\n      </label>\n\n      <button\n        className=\"btn btn-success\"\n        disabled={!selectedFiles}\n        onClick={upload}\n      >\n        Upload\n      </button>\n\n      <div className=\"alert alert-light\" role=\"alert\">\n        {message}\n      </div>\n\n      <div className=\"card\">\n        <div className=\"card-header\">List of Files</div>\n        <ul className=\"list-group list-group-flush\">\n          {fileInfos &&\n            fileInfos.map((file:any, index) => (\n              <li className=\"list-group-item\" key={index}>\n                <a href={file.url}>{file.name}</a>\n              </li>\n            ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default FileLoader;\n"]},"metadata":{},"sourceType":"module"}