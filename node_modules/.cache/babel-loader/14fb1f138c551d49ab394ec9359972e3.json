{"ast":null,"code":"var _jsxFileName = \"/home/tanmoy/Desktop/map/Dtest/src/Components/FileLoader/FileLoader.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport UploadService from \"../../services/FileUploadService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FileLoader = ({\n  content\n}) => {\n  _s();\n\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\n  const [currentFile, setCurrentFile] = useState(undefined);\n  const [progress, setProgress] = useState(0);\n  const [message, setMessage] = useState(\"\");\n  const [fileInfos, setFileInfos] = useState([]);\n  useEffect(() => {\n    UploadService.getFiles().then(response => {\n      setFileInfos(response.data);\n    });\n  }, []);\n\n  const selectFile = event => {\n    setSelectedFiles(event.target.files);\n  };\n\n  const upload = () => {\n    let currentFile = selectedFiles[0];\n    setProgress(0);\n    setCurrentFile(currentFile);\n    UploadService.upload(currentFile, event => {\n      setProgress(Math.round(100 * event.loaded / event.total));\n    }).then(response => {\n      setMessage(response.data.message);\n      return UploadService.getFiles();\n    }).then(files => {\n      setFileInfos(files.data);\n    }).catch(() => {\n      setProgress(0);\n      setMessage(\"Could not upload the file!\");\n      setCurrentFile(undefined);\n    });\n    setSelectedFiles(undefined);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 3\n  }, this);\n};\n\n_s(FileLoader, \"rp6w94naj8+7ysk2gK1qQ2/xWj4=\");\n\n_c = FileLoader;\nexport default FileLoader;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileLoader\");","map":{"version":3,"sources":["/home/tanmoy/Desktop/map/Dtest/src/Components/FileLoader/FileLoader.tsx"],"names":["React","useState","useEffect","UploadService","FileLoader","content","selectedFiles","setSelectedFiles","undefined","currentFile","setCurrentFile","progress","setProgress","message","setMessage","fileInfos","setFileInfos","getFiles","then","response","data","selectFile","event","target","files","upload","Math","round","loaded","total","catch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,kCAA1B;;;AAKA,MAAMC,UAA2B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqC;AAAA;;AAErE,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAACO,SAAD,CAAlD;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAACO,SAAD,CAA9C;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,aAAa,CAACc,QAAd,GAAyBC,IAAzB,CAA+BC,QAAD,IAAc;AAC1CH,MAAAA,YAAY,CAACG,QAAQ,CAACC,IAAV,CAAZ;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5Bf,IAAAA,gBAAgB,CAACe,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAhB;AACD,GAFD;;AAIA,QAAMC,MAAM,GAAG,MAAM;AACnB,QAAIhB,WAAW,GAAGH,aAAa,CAAC,CAAD,CAA/B;AAEAM,IAAAA,WAAW,CAAC,CAAD,CAAX;AACAF,IAAAA,cAAc,CAACD,WAAD,CAAd;AAEAN,IAAAA,aAAa,CAACsB,MAAd,CAAqBhB,WAArB,EAAmCa,KAAD,IAAW;AAC3CV,MAAAA,WAAW,CAACc,IAAI,CAACC,KAAL,CAAY,MAAML,KAAK,CAACM,MAAb,GAAuBN,KAAK,CAACO,KAAxC,CAAD,CAAX;AACD,KAFD,EAGGX,IAHH,CAGSC,QAAD,IAAc;AAClBL,MAAAA,UAAU,CAACK,QAAQ,CAACC,IAAT,CAAcP,OAAf,CAAV;AACA,aAAOV,aAAa,CAACc,QAAd,EAAP;AACD,KANH,EAOGC,IAPH,CAOSM,KAAD,IAAW;AACfR,MAAAA,YAAY,CAACQ,KAAK,CAACJ,IAAP,CAAZ;AACD,KATH,EAUGU,KAVH,CAUS,MAAM;AACXlB,MAAAA,WAAW,CAAC,CAAD,CAAX;AACAE,MAAAA,UAAU,CAAC,4BAAD,CAAV;AACAJ,MAAAA,cAAc,CAACF,SAAD,CAAd;AACD,KAdH;AAgBAD,IAAAA,gBAAgB,CAACC,SAAD,CAAhB;AACD,GAvBD;;AAyBF,sBACA;AAAA;AAAA;AAAA;AAAA,UADA;AAKD,CAhDD;;GAAMJ,U;;KAAAA,U;AAkDN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport UploadService from \"../../services/FileUploadService\";\ninterface Props {\n  content: string;\n}\n\nconst FileLoader: React.FC<Props> = ({ content }): React.ReactElement => {\n\n    const [selectedFiles, setSelectedFiles] = useState(undefined);\n    const [currentFile, setCurrentFile] = useState(undefined);\n    const [progress, setProgress] = useState(0);\n    const [message, setMessage] = useState(\"\");\n    const [fileInfos, setFileInfos] = useState([]);\n  \n    useEffect(() => {\n      UploadService.getFiles().then((response) => {\n        setFileInfos(response.data);\n      });\n    }, []);\n  \n    const selectFile = (event) => {\n      setSelectedFiles(event.target.files);\n    };\n  \n    const upload = () => {\n      let currentFile = selectedFiles[0];\n  \n      setProgress(0);\n      setCurrentFile(currentFile);\n  \n      UploadService.upload(currentFile, (event) => {\n        setProgress(Math.round((100 * event.loaded) / event.total));\n      })\n        .then((response) => {\n          setMessage(response.data.message);\n          return UploadService.getFiles();\n        })\n        .then((files) => {\n          setFileInfos(files.data);\n        })\n        .catch(() => {\n          setProgress(0);\n          setMessage(\"Could not upload the file!\");\n          setCurrentFile(undefined);\n        });\n  \n      setSelectedFiles(undefined);\n    };\n\n  return (\n  <div>\n      \n  </div>\n  )\n};\n\nexport default FileLoader;\n"]},"metadata":{},"sourceType":"module"}